"""
（1）基础知识· 一个try语句支持多个except子句，但请记得把更精确的异常类放在前面· try语句的else分支会在没有异常时执行，因此它可用来替代标记变量·
不带任何参数的raise语句会重复抛出当前异常· 上下文管理器经常用来处理异常，它最常见的用途是替代finally子句· 上下文管理器可以用来忽略某段代码里的异常·
使用@contextmanager装饰器可以轻松定义上下文管理器
（2）错误处理与参数校验· 当你可以选择编写条件判断或异常捕获时，优先选异常捕获（EAFP）· 不要让函数返回错误信息，直接抛出自定义异常吧·
手动校验数据合法性非常烦琐，尽量使用专业模块来做这件事· 不要使用assert来做参数校验，用raise替代它· 处理错误需要付出额外成本，假如能通过设计避免它就再好不过了·
在设计API时，需要慎重考虑是否真的有必要抛出错误· 使用“空对象模式”能免去一些针对边界情况的错误处理工作
（3）当你捕获异常时：· 过于模糊和宽泛的异常捕获可能会让程序免于崩溃，但也可能会带来更大的麻烦· 异常捕获贵在精确，只捕获可能抛出异常的语句，只捕获可能的异常类型·
 有时候，让程序提早崩溃未必是什么坏事· 完全忽略异常是风险非常高的行为，大多数情况下，至少记录一条错误日志
（4）当你抛出异常时：· 保证模块内抛出的异常与模块自身的抽象级别一致· 如果异常的抽象级别过高，把它替换为更低级的新异常·
 如果异常的抽象级别过低，把它包装成更高级的异常，然后重新抛出· 不要让调用方用字符串匹配来判断异常种类，尽量提供可区分的异常

"""